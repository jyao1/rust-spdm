// Copyright (c) 2021 Intel Corporation
//
// SPDX-License-Identifier: BSD-2-Clause-Patent

extern crate alloc;
use alloc::vec::Vec;

use crate::crypto::SpdmCertOperation;
use crate::error::SpdmResult;

pub static DEFAULT: SpdmCertOperation = SpdmCertOperation {
    get_cert_from_cert_chain_cb: get_cert_from_cert_chain,
    verify_cert_chain_cb: verify_cert_chain,
};

fn get_cert_from_cert_chain(cert_chain: &[u8], index: isize) -> SpdmResult<(usize, usize)> {
    let mut offset = 0usize;
    let mut this_index = 0isize;
    loop {
        if cert_chain[offset..].len() < 4 || offset > cert_chain.len() {
            return spdm_result_err!(EINVAL);
        }
        if cert_chain[offset] != 0x30 || cert_chain[offset + 1] != 0x82 {
            return spdm_result_err!(EINVAL);
        }
        let this_cert_len =
            ((cert_chain[offset + 2] as usize) << 8) + (cert_chain[offset + 3] as usize) + 4;
        //debug!("this_cert_len - 0x{:04x?}\n", this_cert_len);
        if this_index == index {
            // return the this one
            return Ok((offset, offset + this_cert_len));
        }
        this_index += 1;
        if (offset + this_cert_len == cert_chain.len()) && (index == -1) {
            // return the last one
            return Ok((offset, offset + this_cert_len));
        }
        offset += this_cert_len;
    }
}

fn verify_cert_chain(cert_chain: &[u8]) -> SpdmResult {
    static EKU_SPDM_RESPONDER_AUTH: webpki::verify_cert::KeyPurposeId =
        webpki::verify_cert::KeyPurposeId {
            oid_value: untrusted::Input::from(&[40 + 3, 6, 1, 5, 5, 7, 3, 1]), // TBD
        };

    static ALL_SIGALGS: &[&webpki::SignatureAlgorithm] = &[
        &webpki::RSA_PKCS1_2048_8192_SHA256,
        &webpki::RSA_PKCS1_2048_8192_SHA384,
        &webpki::RSA_PKCS1_2048_8192_SHA512,
        &webpki::ECDSA_P256_SHA256,
        &webpki::ECDSA_P256_SHA384,
        &webpki::ECDSA_P384_SHA256,
        &webpki::ECDSA_P384_SHA384,
    ];

    let (ca_begin, ca_end) = get_cert_from_cert_chain(cert_chain, 0)?;
    let ca = &cert_chain[ca_begin..ca_end];
    // TBD: assume only one inter cert here.
    let (inter_begin, inter_end) = get_cert_from_cert_chain(cert_chain, 1)?;
    let inter = &cert_chain[inter_begin..inter_end];
    let (ee_begin, ee_end) = get_cert_from_cert_chain(cert_chain, -1)?;
    let ee = &cert_chain[ee_begin..ee_end];

    let mut anchors = Vec::new();
    anchors.push(webpki::TrustAnchor::from_cert_der(ca).unwrap());

    #[cfg(target_os = "uefi")]
    let time = webpki::Time::from_seconds_since_unix_epoch(uefi_time::get_rtc_time() as u64);
    #[cfg(feature = "std")]
    use std::convert::TryFrom;
    #[cfg(feature = "std")]
    let time = webpki::Time::try_from(std::time::SystemTime::now()).unwrap();

    let cert = webpki::cert::parse_cert(
        untrusted::Input::from(ee),
        webpki::cert::EndEntityOrCA::EndEntity,
    )
    .unwrap();

    // we cannot call verify_is_valid_tls_server_cert because it will check verify_cert::EKU_SERVER_AUTH.
    if webpki::verify_cert::build_chain(
        EKU_SPDM_RESPONDER_AUTH,
        ALL_SIGALGS,
        &anchors,
        &[inter],
        &cert,
        time,
        0,
    )
    .is_ok()
    {
        info!("Cert verification Pass\n");
        Ok(())
    } else {
        error!("Cert verification Fail\n");
        spdm_result_err!(EFAULT)
    }
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_case0_cert_from_cert_chain() {
        let cert_chain = &mut cert_chain_array();
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, -1);

        match get_cert_from_cert_chain {
            Ok((942, 0x5d4)) => {
                println!("Cert verification");
            }
            _ => {
                assert!(false);
            }
        }
    }

    #[test]
    fn test_case1_cert_from_cert_chain() {
        let cert_chain = &mut cert_chain_array();
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, 0);

        match get_cert_from_cert_chain {
            Ok((0, 0x1d3)) => {
                println!("Cert verification");
            }
            _ => {
                assert!(false);
            }
        }
    }
    #[test]
    fn test_case2_cert_from_cert_chain() {
        let cert_chain = &mut cert_chain_array();
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, 1);

        match get_cert_from_cert_chain {
            Ok((467, 0x3ae)) => {
                println!("Cert verification");
            }
            _ => {
                assert!(false);
            }
        }
    }
    #[test]
    fn test_case3_cert_from_cert_chain() {
        let cert_chain = &mut [0x1u8; 4096];

        cert_chain[0] = 0x00;
        cert_chain[1] = 0x00;
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, 0);

        match get_cert_from_cert_chain {
            Ok((0, 0)) => {
                assert!(false);
            }
            _ => {
                assert!(true);
            }
        }
    }
    #[test]
    fn test_case4_cert_from_cert_chain() {
        let cert_chain = &mut [0x11u8; 3];
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, 0);

        match get_cert_from_cert_chain {
            Ok((0, 0)) => {
                assert!(false);
            }
            _ => {
                assert!(true);
            }
        }
    }
    #[test]
    fn test_case5_cert_from_cert_chain() {
        let cert_chain = &mut cert_chain_array();
        let get_cert_from_cert_chain = get_cert_from_cert_chain(cert_chain, -1);

        match get_cert_from_cert_chain {
            Ok((942, 0x5d4)) => {
                println!("Cert verification");
            }
            _ => {
                assert!(false);
            }
        }
        let get_cert_from_cert_chain = verify_cert_chain(cert_chain);
        match get_cert_from_cert_chain {
            Ok(()) => {
                println!("Cert verification");
            }
            _ => {
                assert!(false);
            }
        }
    }
    fn cert_chain_array() -> [u8; 1492] {
        let cert_chain = [
            0x30u8, 0x82u8, 0x01u8, 0xcfu8, 0x30u8, 0x82u8, 0x01u8, 0x56u8, 0xa0u8, 0x03u8, 0x02u8,
            0x01u8, 0x02u8, 0x02u8, 0x14u8, 0x20u8, 0x3au8, 0xc2u8, 0x59u8, 0xccu8, 0xdau8, 0xcbu8,
            0xf6u8, 0x72u8, 0xf1u8, 0xc0u8, 0x1au8, 0x62u8, 0x1au8, 0x45u8, 0x82u8, 0x90u8, 0x24u8,
            0xb8u8, 0xafu8, 0x30u8, 0x0au8, 0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8,
            0x04u8, 0x03u8, 0x03u8, 0x30u8, 0x1fu8, 0x31u8, 0x1du8, 0x30u8, 0x1bu8, 0x06u8, 0x03u8,
            0x55u8, 0x04u8, 0x03u8, 0x0cu8, 0x14u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x6cu8, 0x20u8,
            0x74u8, 0x65u8, 0x73u8, 0x74u8, 0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8, 0x35u8, 0x36u8,
            0x20u8, 0x43u8, 0x41u8, 0x30u8, 0x1eu8, 0x17u8, 0x0du8, 0x32u8, 0x31u8, 0x30u8, 0x32u8,
            0x30u8, 0x39u8, 0x30u8, 0x30u8, 0x35u8, 0x30u8, 0x35u8, 0x38u8, 0x5au8, 0x17u8, 0x0du8,
            0x33u8, 0x31u8, 0x30u8, 0x32u8, 0x30u8, 0x37u8, 0x30u8, 0x30u8, 0x35u8, 0x30u8, 0x35u8,
            0x38u8, 0x5au8, 0x30u8, 0x1fu8, 0x31u8, 0x1du8, 0x30u8, 0x1bu8, 0x06u8, 0x03u8, 0x55u8,
            0x04u8, 0x03u8, 0x0cu8, 0x14u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x6cu8, 0x20u8, 0x74u8,
            0x65u8, 0x73u8, 0x74u8, 0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8, 0x35u8, 0x36u8, 0x20u8,
            0x43u8, 0x41u8, 0x30u8, 0x76u8, 0x30u8, 0x10u8, 0x06u8, 0x07u8, 0x2au8, 0x86u8, 0x48u8,
            0xceu8, 0x3du8, 0x02u8, 0x01u8, 0x06u8, 0x05u8, 0x2bu8, 0x81u8, 0x04u8, 0x00u8, 0x22u8,
            0x03u8, 0x62u8, 0x00u8, 0x04u8, 0x99u8, 0x8fu8, 0x81u8, 0x68u8, 0x9au8, 0x83u8, 0x9bu8,
            0x83u8, 0x39u8, 0xadu8, 0x0eu8, 0x32u8, 0x8du8, 0xb9u8, 0x42u8, 0x0du8, 0xaeu8, 0xccu8,
            0x91u8, 0xa9u8, 0xbcu8, 0x4au8, 0xe1u8, 0xbbu8, 0x79u8, 0x4cu8, 0x22u8, 0xfau8, 0x3fu8,
            0x0cu8, 0x9du8, 0x93u8, 0x3cu8, 0x1au8, 0x02u8, 0x5cu8, 0xc2u8, 0x73u8, 0x05u8, 0xecu8,
            0x43u8, 0x5du8, 0x04u8, 0x02u8, 0xb1u8, 0x68u8, 0xb3u8, 0xf4u8, 0xd8u8, 0xdeu8, 0x0cu8,
            0x8du8, 0x53u8, 0xb7u8, 0x04u8, 0x8eu8, 0xa1u8, 0x43u8, 0x9au8, 0xebu8, 0x31u8, 0x0du8,
            0xaau8, 0xceu8, 0x89u8, 0x2du8, 0xbau8, 0x73u8, 0xdau8, 0x4fu8, 0x1eu8, 0x39u8, 0x5du8,
            0x92u8, 0x11u8, 0x21u8, 0x38u8, 0xb4u8, 0x00u8, 0xd4u8, 0xf5u8, 0x55u8, 0x8cu8, 0xe8u8,
            0x71u8, 0x30u8, 0x3du8, 0x46u8, 0x83u8, 0xf4u8, 0xc4u8, 0x52u8, 0x50u8, 0xdau8, 0x12u8,
            0x5bu8, 0xa3u8, 0x53u8, 0x30u8, 0x51u8, 0x30u8, 0x1du8, 0x06u8, 0x03u8, 0x55u8, 0x1du8,
            0x0eu8, 0x04u8, 0x16u8, 0x04u8, 0x14u8, 0xcfu8, 0x09u8, 0xd4u8, 0x7au8, 0xeeu8, 0x08u8,
            0x90u8, 0x62u8, 0xbfu8, 0xe6u8, 0x9cu8, 0xb4u8, 0xb9u8, 0xdfu8, 0xe1u8, 0x41u8, 0x33u8,
            0x1cu8, 0x03u8, 0xa5u8, 0x30u8, 0x1fu8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x23u8, 0x04u8,
            0x18u8, 0x30u8, 0x16u8, 0x80u8, 0x14u8, 0xcfu8, 0x09u8, 0xd4u8, 0x7au8, 0xeeu8, 0x08u8,
            0x90u8, 0x62u8, 0xbfu8, 0xe6u8, 0x9cu8, 0xb4u8, 0xb9u8, 0xdfu8, 0xe1u8, 0x41u8, 0x33u8,
            0x1cu8, 0x03u8, 0xa5u8, 0x30u8, 0x0fu8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x13u8, 0x01u8,
            0x01u8, 0xffu8, 0x04u8, 0x05u8, 0x30u8, 0x03u8, 0x01u8, 0x01u8, 0xffu8, 0x30u8, 0x0au8,
            0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x04u8, 0x03u8, 0x03u8, 0x03u8,
            0x67u8, 0x00u8, 0x30u8, 0x64u8, 0x02u8, 0x30u8, 0x5au8, 0xb4u8, 0xf5u8, 0x95u8, 0x25u8,
            0x82u8, 0xf6u8, 0x68u8, 0x3eu8, 0x49u8, 0xc7u8, 0xb4u8, 0xbbu8, 0x42u8, 0x81u8, 0x91u8,
            0x7eu8, 0x38u8, 0xd0u8, 0x2du8, 0xacu8, 0x53u8, 0xaeu8, 0x8eu8, 0xb0u8, 0x51u8, 0x50u8,
            0xaau8, 0xf8u8, 0x7eu8, 0xffu8, 0xc0u8, 0x30u8, 0xabu8, 0xd5u8, 0x08u8, 0x5bu8, 0x06u8,
            0xf7u8, 0xe1u8, 0xbfu8, 0x39u8, 0xd2u8, 0x3eu8, 0xaeu8, 0xbfu8, 0x8eu8, 0x48u8, 0x02u8,
            0x30u8, 0x09u8, 0x75u8, 0xa8u8, 0xc0u8, 0x6fu8, 0x4fu8, 0x3cu8, 0xadu8, 0x5du8, 0x4eu8,
            0x4fu8, 0xf8u8, 0x2cu8, 0x3bu8, 0x39u8, 0x46u8, 0xa0u8, 0xdfu8, 0x83u8, 0x8eu8, 0xb5u8,
            0xd3u8, 0x61u8, 0x61u8, 0x59u8, 0xbcu8, 0x39u8, 0xd7u8, 0xadu8, 0x68u8, 0x5eu8, 0x0du8,
            0x4fu8, 0x3fu8, 0xe2u8, 0xcau8, 0xc1u8, 0x74u8, 0x8fu8, 0x47u8, 0x37u8, 0x11u8, 0xc8u8,
            0x22u8, 0x59u8, 0x6fu8, 0x64u8, 0x52u8, 0x30u8, 0x82u8, 0x01u8, 0xd7u8, 0x30u8, 0x82u8,
            0x01u8, 0x5du8, 0xa0u8, 0x03u8, 0x02u8, 0x01u8, 0x02u8, 0x02u8, 0x01u8, 0x01u8, 0x30u8,
            0x0au8, 0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x04u8, 0x03u8, 0x03u8,
            0x30u8, 0x1fu8, 0x31u8, 0x1du8, 0x30u8, 0x1bu8, 0x06u8, 0x03u8, 0x55u8, 0x04u8, 0x03u8,
            0x0cu8, 0x14u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x6cu8, 0x20u8, 0x74u8, 0x65u8, 0x73u8,
            0x74u8, 0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8, 0x35u8, 0x36u8, 0x20u8, 0x43u8, 0x41u8,
            0x30u8, 0x1eu8, 0x17u8, 0x0du8, 0x32u8, 0x31u8, 0x30u8, 0x32u8, 0x30u8, 0x39u8, 0x30u8,
            0x30u8, 0x35u8, 0x30u8, 0x35u8, 0x39u8, 0x5au8, 0x17u8, 0x0du8, 0x33u8, 0x31u8, 0x30u8,
            0x32u8, 0x30u8, 0x37u8, 0x30u8, 0x30u8, 0x35u8, 0x30u8, 0x35u8, 0x39u8, 0x5au8, 0x30u8,
            0x2eu8, 0x31u8, 0x2cu8, 0x30u8, 0x2au8, 0x06u8, 0x03u8, 0x55u8, 0x04u8, 0x03u8, 0x0cu8,
            0x23u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x6cu8, 0x20u8, 0x74u8, 0x65u8, 0x73u8, 0x74u8,
            0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8, 0x35u8, 0x36u8, 0x20u8, 0x69u8, 0x6eu8, 0x74u8,
            0x65u8, 0x72u8, 0x6du8, 0x65u8, 0x64u8, 0x69u8, 0x61u8, 0x74u8, 0x65u8, 0x20u8, 0x63u8,
            0x65u8, 0x72u8, 0x74u8, 0x30u8, 0x76u8, 0x30u8, 0x10u8, 0x06u8, 0x07u8, 0x2au8, 0x86u8,
            0x48u8, 0xceu8, 0x3du8, 0x02u8, 0x01u8, 0x06u8, 0x05u8, 0x2bu8, 0x81u8, 0x04u8, 0x00u8,
            0x22u8, 0x03u8, 0x62u8, 0x00u8, 0x04u8, 0x77u8, 0x1bu8, 0x24u8, 0xf6u8, 0xc6u8, 0x76u8,
            0x1fu8, 0xb8u8, 0x30u8, 0x07u8, 0x8bu8, 0xb8u8, 0xa3u8, 0x9eu8, 0xc0u8, 0x26u8, 0xc1u8,
            0xeau8, 0x7du8, 0xfcu8, 0x29u8, 0x7du8, 0xe0u8, 0x59u8, 0xb2u8, 0x64u8, 0x32u8, 0x75u8,
            0x4au8, 0xe3u8, 0x02u8, 0x64u8, 0x3cu8, 0xbcu8, 0x85u8, 0x8eu8, 0xc6u8, 0xecu8, 0xefu8,
            0xb0u8, 0x79u8, 0xf4u8, 0xc1u8, 0xa4u8, 0xb9u8, 0xbbu8, 0x29u8, 0x6bu8, 0xaeu8, 0xadu8,
            0xf0u8, 0x7du8, 0x63u8, 0xc6u8, 0xafu8, 0xb3u8, 0x73u8, 0x5eu8, 0x4fu8, 0x3fu8, 0xfeu8,
            0x89u8, 0x8au8, 0xbbu8, 0x7du8, 0x2bu8, 0x60u8, 0x3eu8, 0x16u8, 0xbau8, 0x82u8, 0xcfu8,
            0xa4u8, 0x70u8, 0x04u8, 0x85u8, 0xc3u8, 0xa3u8, 0x3cu8, 0x5eu8, 0x6au8, 0xa0u8, 0xefu8,
            0xdau8, 0xd5u8, 0x20u8, 0x30u8, 0x19u8, 0xbau8, 0x79u8, 0x95u8, 0xb0u8, 0xc2u8, 0x7fu8,
            0x4cu8, 0xddu8, 0xa3u8, 0x5eu8, 0x30u8, 0x5cu8, 0x30u8, 0x0cu8, 0x06u8, 0x03u8, 0x55u8,
            0x1du8, 0x13u8, 0x04u8, 0x05u8, 0x30u8, 0x03u8, 0x01u8, 0x01u8, 0xffu8, 0x30u8, 0x0bu8,
            0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x0fu8, 0x04u8, 0x04u8, 0x03u8, 0x02u8, 0x01u8, 0xfeu8,
            0x30u8, 0x1du8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x0eu8, 0x04u8, 0x16u8, 0x04u8, 0x14u8,
            0x12u8, 0xe0u8, 0x1au8, 0x23u8, 0xc6u8, 0x23u8, 0xe4u8, 0x02u8, 0x58u8, 0x0bu8, 0x06u8,
            0xacu8, 0x90u8, 0xfau8, 0x4bu8, 0x80u8, 0x3du8, 0xc9u8, 0xf1u8, 0x1du8, 0x30u8, 0x20u8,
            0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x25u8, 0x01u8, 0x01u8, 0xffu8, 0x04u8, 0x16u8, 0x30u8,
            0x14u8, 0x06u8, 0x08u8, 0x2bu8, 0x06u8, 0x01u8, 0x05u8, 0x05u8, 0x07u8, 0x03u8, 0x01u8,
            0x06u8, 0x08u8, 0x2bu8, 0x06u8, 0x01u8, 0x05u8, 0x05u8, 0x07u8, 0x03u8, 0x02u8, 0x30u8,
            0x0au8, 0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x04u8, 0x03u8, 0x03u8,
            0x03u8, 0x68u8, 0x00u8, 0x30u8, 0x65u8, 0x02u8, 0x30u8, 0x03u8, 0x32u8, 0xb1u8, 0x8bu8,
            0x20u8, 0xf4u8, 0x76u8, 0xdau8, 0x8cu8, 0x83u8, 0x96u8, 0x87u8, 0x55u8, 0xd9u8, 0x12u8,
            0x72u8, 0xbdu8, 0x58u8, 0x4du8, 0x0au8, 0x37u8, 0xafu8, 0x29u8, 0x95u8, 0x1du8, 0x36u8,
            0xc4u8, 0x9eu8, 0xa5u8, 0xcdu8, 0xe2u8, 0x3bu8, 0xf5u8, 0xe0u8, 0x7au8, 0x64u8, 0x36u8,
            0x1eu8, 0xd4u8, 0xf1u8, 0xe1u8, 0xbbu8, 0x14u8, 0x57u8, 0x9eu8, 0x86u8, 0x82u8, 0x72u8,
            0x02u8, 0x31u8, 0x00u8, 0xc0u8, 0xd6u8, 0x02u8, 0x99u8, 0x50u8, 0x76u8, 0x34u8, 0x16u8,
            0xd6u8, 0x51u8, 0x9cu8, 0xc4u8, 0x86u8, 0x08u8, 0x68u8, 0x94u8, 0xbfu8, 0x3cu8, 0x09u8,
            0x7eu8, 0x10u8, 0xe5u8, 0x62u8, 0x8au8, 0xbau8, 0x48u8, 0x0au8, 0xa5u8, 0xedu8, 0x1au8,
            0x6au8, 0xf6u8, 0x3cu8, 0x2fu8, 0x4du8, 0x38u8, 0x5du8, 0x7du8, 0x5cu8, 0x60u8, 0x63u8,
            0x88u8, 0x84u8, 0x5du8, 0x49u8, 0x33u8, 0xe2u8, 0xa7u8, 0x30u8, 0x82u8, 0x02u8, 0x22u8,
            0x30u8, 0x82u8, 0x01u8, 0xa8u8, 0xa0u8, 0x03u8, 0x02u8, 0x01u8, 0x02u8, 0x02u8, 0x01u8,
            0x03u8, 0x30u8, 0x0au8, 0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x04u8,
            0x03u8, 0x03u8, 0x30u8, 0x2eu8, 0x31u8, 0x2cu8, 0x30u8, 0x2au8, 0x06u8, 0x03u8, 0x55u8,
            0x04u8, 0x03u8, 0x0cu8, 0x23u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x6cu8, 0x20u8, 0x74u8,
            0x65u8, 0x73u8, 0x74u8, 0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8, 0x35u8, 0x36u8, 0x20u8,
            0x69u8, 0x6eu8, 0x74u8, 0x65u8, 0x72u8, 0x6du8, 0x65u8, 0x64u8, 0x69u8, 0x61u8, 0x74u8,
            0x65u8, 0x20u8, 0x63u8, 0x65u8, 0x72u8, 0x74u8, 0x30u8, 0x1eu8, 0x17u8, 0x0du8, 0x32u8,
            0x31u8, 0x30u8, 0x32u8, 0x30u8, 0x39u8, 0x30u8, 0x30u8, 0x35u8, 0x30u8, 0x35u8, 0x39u8,
            0x5au8, 0x17u8, 0x0du8, 0x32u8, 0x32u8, 0x30u8, 0x32u8, 0x30u8, 0x39u8, 0x30u8, 0x30u8,
            0x35u8, 0x30u8, 0x35u8, 0x39u8, 0x5au8, 0x30u8, 0x2bu8, 0x31u8, 0x29u8, 0x30u8, 0x27u8,
            0x06u8, 0x03u8, 0x55u8, 0x04u8, 0x03u8, 0x0cu8, 0x20u8, 0x69u8, 0x6eu8, 0x74u8, 0x65u8,
            0x6cu8, 0x20u8, 0x74u8, 0x65u8, 0x73u8, 0x74u8, 0x20u8, 0x45u8, 0x43u8, 0x50u8, 0x32u8,
            0x35u8, 0x36u8, 0x20u8, 0x72u8, 0x65u8, 0x73u8, 0x70u8, 0x6fu8, 0x6eu8, 0x64u8, 0x65u8,
            0x72u8, 0x20u8, 0x63u8, 0x65u8, 0x72u8, 0x74u8, 0x30u8, 0x76u8, 0x30u8, 0x10u8, 0x06u8,
            0x07u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x02u8, 0x01u8, 0x06u8, 0x05u8, 0x2bu8,
            0x81u8, 0x04u8, 0x00u8, 0x22u8, 0x03u8, 0x62u8, 0x00u8, 0x04u8, 0x6cu8, 0x22u8, 0x41u8,
            0xdfu8, 0xb7u8, 0xe4u8, 0xd6u8, 0x8du8, 0x53u8, 0x72u8, 0x4eu8, 0x4au8, 0x1bu8, 0x99u8,
            0x82u8, 0xe6u8, 0x56u8, 0xd2u8, 0x2du8, 0x97u8, 0x4bu8, 0x98u8, 0x40u8, 0xa9u8, 0x99u8,
            0xd6u8, 0x0du8, 0xd8u8, 0xe9u8, 0xa6u8, 0xfcu8, 0x74u8, 0xb9u8, 0xceu8, 0x89u8, 0x48u8,
            0xa7u8, 0xb5u8, 0x09u8, 0xb6u8, 0x24u8, 0x49u8, 0xd6u8, 0x23u8, 0xb3u8, 0x5fu8, 0x3au8,
            0xf0u8, 0x99u8, 0xb0u8, 0xcau8, 0x63u8, 0x7du8, 0x24u8, 0xfeu8, 0xe9u8, 0x12u8, 0x19u8,
            0x0fu8, 0xc2u8, 0x73u8, 0x1cu8, 0xe3u8, 0x76u8, 0x91u8, 0xecu8, 0x57u8, 0x6cu8, 0xcdu8,
            0x7bu8, 0xabu8, 0x32u8, 0xfdu8, 0x6du8, 0x6eu8, 0x92u8, 0x7du8, 0x37u8, 0x60u8, 0x01u8,
            0xdbu8, 0x13u8, 0x92u8, 0x3bu8, 0x77u8, 0xf7u8, 0x12u8, 0x97u8, 0x1du8, 0x5eu8, 0xe3u8,
            0xb9u8, 0x15u8, 0x83u8, 0xafu8, 0x89u8, 0xa3u8, 0x81u8, 0x9cu8, 0x30u8, 0x81u8, 0x99u8,
            0x30u8, 0x0cu8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x13u8, 0x01u8, 0x01u8, 0xffu8, 0x04u8,
            0x02u8, 0x30u8, 0x00u8, 0x30u8, 0x0bu8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x0fu8, 0x04u8,
            0x04u8, 0x03u8, 0x02u8, 0x05u8, 0xe0u8, 0x30u8, 0x1du8, 0x06u8, 0x03u8, 0x55u8, 0x1du8,
            0x0eu8, 0x04u8, 0x16u8, 0x04u8, 0x14u8, 0x48u8, 0x1fu8, 0x5du8, 0x95u8, 0xceu8, 0x89u8,
            0xd4u8, 0x7du8, 0xa4u8, 0x4cu8, 0x21u8, 0x8fu8, 0x5bu8, 0xd5u8, 0x50u8, 0x96u8, 0xffu8,
            0xbau8, 0xe2u8, 0xeeu8, 0x30u8, 0x31u8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x11u8, 0x04u8,
            0x2au8, 0x30u8, 0x28u8, 0xa0u8, 0x26u8, 0x06u8, 0x0au8, 0x2bu8, 0x06u8, 0x01u8, 0x04u8,
            0x01u8, 0x83u8, 0x1cu8, 0x82u8, 0x12u8, 0x01u8, 0xa0u8, 0x18u8, 0x0cu8, 0x16u8, 0x41u8,
            0x43u8, 0x4du8, 0x45u8, 0x3au8, 0x57u8, 0x49u8, 0x44u8, 0x47u8, 0x45u8, 0x54u8, 0x3au8,
            0x31u8, 0x32u8, 0x33u8, 0x34u8, 0x35u8, 0x36u8, 0x37u8, 0x38u8, 0x39u8, 0x30u8, 0x30u8,
            0x2au8, 0x06u8, 0x03u8, 0x55u8, 0x1du8, 0x25u8, 0x01u8, 0x01u8, 0xffu8, 0x04u8, 0x20u8,
            0x30u8, 0x1eu8, 0x06u8, 0x08u8, 0x2bu8, 0x06u8, 0x01u8, 0x05u8, 0x05u8, 0x07u8, 0x03u8,
            0x01u8, 0x06u8, 0x08u8, 0x2bu8, 0x06u8, 0x01u8, 0x05u8, 0x05u8, 0x07u8, 0x03u8, 0x02u8,
            0x06u8, 0x08u8, 0x2bu8, 0x06u8, 0x01u8, 0x05u8, 0x05u8, 0x07u8, 0x03u8, 0x09u8, 0x30u8,
            0x0au8, 0x06u8, 0x08u8, 0x2au8, 0x86u8, 0x48u8, 0xceu8, 0x3du8, 0x04u8, 0x03u8, 0x03u8,
            0x03u8, 0x68u8, 0x00u8, 0x30u8, 0x65u8, 0x02u8, 0x30u8, 0x08u8, 0xe6u8, 0x1fu8, 0x0du8,
            0xdfu8, 0x18u8, 0xd3u8, 0x2fu8, 0x50u8, 0x49u8, 0x99u8, 0xb0u8, 0xe2u8, 0x64u8, 0x95u8,
            0x30u8, 0xa9u8, 0x5au8, 0xbfu8, 0x83u8, 0x76u8, 0xaeu8, 0x4au8, 0x39u8, 0xd8u8, 0xe2u8,
            0x51u8, 0x12u8, 0x84u8, 0x9cu8, 0xbeu8, 0x11u8, 0x1du8, 0x3bu8, 0x77u8, 0x20u8, 0x6fu8,
            0x05u8, 0x6cu8, 0xc7u8, 0x98u8, 0xb2u8, 0xbau8, 0xb8u8, 0x96u8, 0x75u8, 0x25u8, 0xcfu8,
            0x02u8, 0x31u8, 0x00u8, 0x93u8, 0x12u8, 0x5bu8, 0x66u8, 0x93u8, 0xc0u8, 0xe7u8, 0x56u8,
            0x1bu8, 0x68u8, 0x28u8, 0x27u8, 0xd8u8, 0x8eu8, 0x69u8, 0xaau8, 0x30u8, 0x76u8, 0x05u8,
            0x6fu8, 0x4bu8, 0xd0u8, 0xceu8, 0x10u8, 0x0fu8, 0xf8u8, 0xdfu8, 0x4au8, 0xabu8, 0x9bu8,
            0x4du8, 0xb1u8, 0x47u8, 0xe4u8, 0xcdu8, 0xceu8, 0xceu8, 0x48u8, 0x0du8, 0xf8u8, 0x35u8,
            0x3du8, 0xbcu8, 0x25u8, 0xceu8, 0xecu8, 0xb9u8, 0xcau8,
        ];
        cert_chain
    }
}
